// automatically generated by the FlatBuffers compiler, do not modify

package org.odict.java.schema;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Group extends Table {
  public static Group getRootAsGroup(ByteBuffer _bb) { return getRootAsGroup(_bb, new Group()); }
  public static Group getRootAsGroup(ByteBuffer _bb, Group obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public Group __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public String description() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer descriptionAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public String definitions(int j) { int o = __offset(8); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int definitionsLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }

  public static int createGroup(FlatBufferBuilder builder,
      int idOffset,
      int descriptionOffset,
      int definitionsOffset) {
    builder.startObject(3);
    Group.addDefinitions(builder, definitionsOffset);
    Group.addDescription(builder, descriptionOffset);
    Group.addId(builder, idOffset);
    return Group.endGroup(builder);
  }

  public static void startGroup(FlatBufferBuilder builder) { builder.startObject(3); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addDescription(FlatBufferBuilder builder, int descriptionOffset) { builder.addOffset(1, descriptionOffset, 0); }
  public static void addDefinitions(FlatBufferBuilder builder, int definitionsOffset) { builder.addOffset(2, definitionsOffset, 0); }
  public static int createDefinitionsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startDefinitionsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endGroup(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

